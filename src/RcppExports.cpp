// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// weightedGaussianLocalDensity
NumericVector weightedGaussianLocalDensity(NumericVector weights, NumericVector distance, int nrow, double dc);
RcppExport SEXP _weightedClustSuite_weightedGaussianLocalDensity(SEXP weightsSEXP, SEXP distanceSEXP, SEXP nrowSEXP, SEXP dcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< double >::type dc(dcSEXP);
    rcpp_result_gen = Rcpp::wrap(weightedGaussianLocalDensity(weights, distance, nrow, dc));
    return rcpp_result_gen;
END_RCPP
}
// weightedNonGaussianLocalDensity
NumericVector weightedNonGaussianLocalDensity(NumericVector weights, int truesize, NumericVector distance, int nrow, double dc);
RcppExport SEXP _weightedClustSuite_weightedNonGaussianLocalDensity(SEXP weightsSEXP, SEXP truesizeSEXP, SEXP distanceSEXP, SEXP nrowSEXP, SEXP dcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type truesize(truesizeSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< double >::type dc(dcSEXP);
    rcpp_result_gen = Rcpp::wrap(weightedNonGaussianLocalDensity(weights, truesize, distance, nrow, dc));
    return rcpp_result_gen;
END_RCPP
}
// SumCutOff
int SumCutOff(NumericVector weights, NumericVector distance, int nrow, double dc);
RcppExport SEXP _weightedClustSuite_SumCutOff(SEXP weightsSEXP, SEXP distanceSEXP, SEXP nrowSEXP, SEXP dcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< double >::type dc(dcSEXP);
    rcpp_result_gen = Rcpp::wrap(SumCutOff(weights, distance, nrow, dc));
    return rcpp_result_gen;
END_RCPP
}
// extractRowColDistfromDistMatrix
NumericVector extractRowColDistfromDistMatrix(NumericVector distance, int num_row, NumericVector row_inds, NumericVector col_inds);
RcppExport SEXP _weightedClustSuite_extractRowColDistfromDistMatrix(SEXP distanceSEXP, SEXP num_rowSEXP, SEXP row_indsSEXP, SEXP col_indsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< int >::type num_row(num_rowSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type row_inds(row_indsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type col_inds(col_indsSEXP);
    rcpp_result_gen = Rcpp::wrap(extractRowColDistfromDistMatrix(distance, num_row, row_inds, col_inds));
    return rcpp_result_gen;
END_RCPP
}
// DensityPeak_smallest_dist_rho_order_coords
List DensityPeak_smallest_dist_rho_order_coords(NumericVector ordered_rho, NumericVector ordered_coords);
RcppExport SEXP _weightedClustSuite_DensityPeak_smallest_dist_rho_order_coords(SEXP ordered_rhoSEXP, SEXP ordered_coordsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type ordered_rho(ordered_rhoSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type ordered_coords(ordered_coordsSEXP);
    rcpp_result_gen = Rcpp::wrap(DensityPeak_smallest_dist_rho_order_coords(ordered_rho, ordered_coords));
    return rcpp_result_gen;
END_RCPP
}
// DensityPeak_distancesToPeakC
NumericVector DensityPeak_distancesToPeakC(NumericVector distance, NumericVector rho);
RcppExport SEXP _weightedClustSuite_DensityPeak_distancesToPeakC(SEXP distanceSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(DensityPeak_distancesToPeakC(distance, rho));
    return rcpp_result_gen;
END_RCPP
}
// createWeightedDist
NumericVector createWeightedDist(NumericVector distance, int num_row, NumericVector weights);
RcppExport SEXP _weightedClustSuite_createWeightedDist(SEXP distanceSEXP, SEXP num_rowSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< int >::type num_row(num_rowSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(createWeightedDist(distance, num_row, weights));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_weightedClustSuite_weightedGaussianLocalDensity", (DL_FUNC) &_weightedClustSuite_weightedGaussianLocalDensity, 4},
    {"_weightedClustSuite_weightedNonGaussianLocalDensity", (DL_FUNC) &_weightedClustSuite_weightedNonGaussianLocalDensity, 5},
    {"_weightedClustSuite_SumCutOff", (DL_FUNC) &_weightedClustSuite_SumCutOff, 4},
    {"_weightedClustSuite_extractRowColDistfromDistMatrix", (DL_FUNC) &_weightedClustSuite_extractRowColDistfromDistMatrix, 4},
    {"_weightedClustSuite_DensityPeak_smallest_dist_rho_order_coords", (DL_FUNC) &_weightedClustSuite_DensityPeak_smallest_dist_rho_order_coords, 2},
    {"_weightedClustSuite_DensityPeak_distancesToPeakC", (DL_FUNC) &_weightedClustSuite_DensityPeak_distancesToPeakC, 2},
    {"_weightedClustSuite_createWeightedDist", (DL_FUNC) &_weightedClustSuite_createWeightedDist, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_weightedClustSuite(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
